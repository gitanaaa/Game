


import tkinter
from tkinter import *
from PIL import Image, ImageTk
from dataclasses import dataclass
import random
import time
import pygame
import sys, os


# =================================================
# 初期設定値(定数)
WALL_EAST = 800                 # 壁の東側最大値(X最大)
WALL_SOUTH = 600                # 壁の南側最大値(Y最大)

VX0 = [-3, -2, -1, 1, 2, 3]     # ボールのx方向初速選択肢
BALL_X0 = WALL_EAST / 2         # ボールの初期位置(x)
BALL_Y0 = 160                   # ボールの初期位置(y)
BALL_D = 10                     # ボールの大きさ
BALL_VX = random.choice(VX0)    # ボールのx方向初速
BALL_VY = 4                     # ボールのy方向初速
SPEED_UP = 10                   # ボールを加速させる頻度
BALL_MAX_VY = 10                # ボールの最高速度
MULTI_BALL_COUNT = 4            # ボールを分裂させる頻度
BALL_MAX_NUM = 5                # 分裂したボールの最大数

PADDLE_X0 = WALL_EAST / 2 - 50  # パドルの初期位置(x)
PADDLE_Y0 = WALL_SOUTH - 100    # パドルの初期位置(y)
PADDLE_W = 100                  # パドルの幅(w)
PADDLE_H = 20                   # パドルの高さ(h)
PADDLE_VX = 5                   # パドルの速度
PADDLE_COLOR = ["lightslategray", "whitesmoke", "orange"]
PADDLE_OUTLINE = ["#4f5a66", "#cccccc", "#cc8500"]
PADDLE_CHARACTER = 0

CURSOR_X0 = WALL_EAST / 4 - 60  # カーソル初期位置(x)
CURSOR_Y0 = WALL_SOUTH - 150    # カーソル初期位置(y)
CURSOR_W = 120                  # カーソルの幅
CURSOR_H = 120                  # カ―ソル高さ
CURSOR_VX = (WALL_EAST / 2 - WALL_EAST / 4) # カーソル移動


NUM_ROWS = 9         # x方向のブロックの数
NUM_COLS = 3         # y方向のブロックの数
BLOCK_X = 10         # ブロックの位置(x)
BLOCK_Y = 50         # ブロックの位置(y)
BLOCK_W = 80         # ブロックの幅
BLOCK_H = 30         # ブロックの高さ
BLOCK_PAD = 5        # ブロックの間(パディング)
BLOCK_COLORS = ["green", "blue", "darkgray"] #ブロックの色

CANDY_BONUS = 50
CANDY_W = 10
CANDY_H = 10

ADD_SCORE = 10                  # 得点の増加値
DURATION = 0.01                 # 描画間隔(秒)
COUNT_DOWN = ["3","2","1","start"]
YOUR_SCORE_TEXT = ["Your","Score"]


# -----------------------------------
@dataclass
class Cursor:
    id: int
    x: int
    y: int
    w: int
    h: int
    vx: int
    fill: str
    out: str

@dataclass
class Ball:
    id: int
    x: int
    y: int
    vx: int
    vy: int
    d: int
    c: str

@dataclass
class Paddle:
    id: int
    x: int
    y: int
    w: int
    h: int
    vx: int
    c: str
    oc: str

@dataclass
class Block:
    id: int
    x: int
    y: int
    w: int
    h: int
    pt: int
    bc: int
    c: str

@dataclass
class Spear:
    id: int
    x: int
    y: int
    w: int
    h: int
    vy: int
    c: str

@dataclass
class Candy:
    id: int
    x: int
    y: int
    w: int
    h: int
    vy: int
    c: str

@dataclass
class Game:
    start: int

#--------------------------
#セレクト画面枠線
def make_cursor(x, y, w=CURSOR_W, h=CURSOR_H, vx=0, fi="#00001c",out="red"):
    id = canvas.create_rectangle(x, y, x + w, y + h, fill=fi, outline=out)
    return Cursor(id, x, y, w, h, vx, fi, out)

#カーソルの削除
def delete_cursor(cursor):  
    canvas.delete(cursor)

def move_cursor(cursor):
    cursor.x += cursor.vx
    if cursor.x < WALL_EAST / 4 - 60:
        cursor.x = WALL_EAST / 4 - 60
    if cursor.x > WALL_EAST * (3/4) - 60:
        cursor.x = WALL_EAST * (3/4) - 60
    cursor.vx = 0  #矢印キーを押した一瞬だけ反応

#カーソルの再描画
def redraw_cursor(cursor):
    canvas.coords(cursor.id, cursor.x, cursor.y, cursor.x + cursor.w, cursor.y + cursor.h)

#パドルの名前描画
def name_paddle(name,color):
    id = canvas.create_text(WALL_EAST / 2, WALL_SOUTH / 2, text=name, fill = color,
                                     font=("Freestyle Script", 150))
    return id
    
# -------------------------
# ball
# ボールの描画・登録
def make_ball(x, y, vx, vy, d=3, c="magenta"):
    id = canvas.create_oval(x, y, x + d, y + d, fill=c, outline=c)
    return Ball(id, x, y, vx, vy, d, c)

#ボールの削除
def delete_ball(ball):
    canvas.delete(ball.id)

# ボールの移動
def move_ball(ball):
    ball.x += ball.vx
    ball.y += ball.vy

# ボールの再描画
def redraw_ball(ball):
    canvas.coords(ball.id, ball.x, ball.y,
                  ball.x + ball.d, ball.y + ball.d)

# -------------------------
# paddle
# パドルの描画・登録
def make_paddle(x, y, c, oc, w, h=PADDLE_H):
    id = canvas.create_rectangle(x, y, x + w, y + h, fill=c, width = 5, outline = oc)
    return Paddle(id, x, y, w, h, 0, c,oc)

#パドルの削除
def delete_paddle(paddle):
    canvas.delete(paddle.id)
    

# パドルの移動(左右)
def move_paddle(pad):
    global silde
    if slide == 0:
        pad.x += pad.vx
    elif serect == 0:
        pad.x += pad.vx * (1/1.1)     #矢印キーを離すとパドルがスライド
        pad.vx = pad.vx * (1/1.1)
    else:
        pad.x += pad.vx * (1/1.04)     #矢印キーを離すとパドルがスライド
        pad.vx = pad.vx * (1/1.04)
    if pad.x < 0 and serect != 1:
        pad.x = 0
    if pad.x + pad.w > WALL_EAST and serect != 1:
        pad.x = WALL_EAST - pad.w
    if pad.x + pad.w < 0 - PADDLE_W and serect == 1:
        pad.x = WALL_EAST - pad.w
    if pad.x > WALL_EAST and serect == 1:
        pad.x = 0

# パドルの再描画
def redraw_paddle(pad):
    canvas.coords(pad.id, pad.x, pad.y,
                  pad.x + pad.w, pad.y + pad.h)

# ------------------
# block
# ブロックの描画・登録
def make_block(x, y, w=120, h=40, pt=10, bc=1, c="green"):
    id = canvas.create_rectangle(x, y, x + w, y + h, fill=c, outline=c)
    return Block(id, x, y, w, h, pt, bc, c)

# ブロックを消す
def delete_block(block):
    canvas.delete(block.id)

# 複数のブロックを生成する
def make_blocks(n_rows, n_cols, x0, y0, w, h, pad, colors):
    blocks = []
    x0_save = x0
    for y in range(n_cols):
        x0 = x0_save
        bc = n_cols - y
        pt = 10 * bc
        for x in range(n_rows):
            blocks.append(make_block(x0, y0, w, h, pt, bc,
                                     colors[bc - 1]))
            x0 = x0 + w + pad
        y0 = y0 + h + pad
    return blocks

# ------------------
# spear
# 槍の描画・登録
def make_spear(x, y, w=1, h=40, vy=5, c="red"):
    id = canvas.create_rectangle(x, y, x + w, y + h,
                                 fill=c, outline=c)
    return Spear(id, x, y, w, h, vy, c)

# 槍を消す
def delete_spear(spear):
    canvas.delete(spear.id)

# 槍の移動(上下)
def move_spear(spear):
    spear.y += spear.vy

# 槍の再描画
def redraw_spear(spear):
    canvas.coords(spear.id, spear.x, spear.y,
                  spear.x + spear.w, spear.y + spear.h)

# ------------------
# candy(ボーナスアイテム)
# キャンディの描画・登録
def make_candy(x, y, w=5, h=5, vy=5, c="green"):
    id = canvas.create_rectangle(x, y, x + w, y + h,
                                 fill=c, outline=c)
    return Candy(id, x, y, w, h, vy, c)

# キャンディを消す
def delete_candy(candy):
    canvas.delete(candy.id)

# キャンディの移動(上下)
def move_candy(candy):
    candy.y += candy.vy

# キャンディの再描画
def redraw_candy(candy):
    canvas.coords(candy.id, candy.x, candy.y,
                  candy.x + candy.w, candy.y + candy.h)

# -------------------------
# wall
# 壁の生成
def make_walls(ox, oy, width, height):
    canvas.create_rectangle(ox, oy, ox + width, oy + height)

# ------------------
# SPACE Keyを待つ
def game_start(event):
    game.start = True

def game_over():
    canvas.create_text(WALL_EAST/2, 200, text="Game Over!",
                       fill= "magenta", font = ('FixedSys', 16))

#------------------------------
#キャラ選択判定
def select_paddle(cursor):
    global serect
    global PADDLE_CHARACTER
    if cursor.x == CURSOR_X0:
        serect = 0
        PADDLE_CHARACTER = 0

    elif cursor.x == CURSOR_X0 + CURSOR_VX:
        serect = 1
        PADDLE_CHARACTER = 1

    else:
        serect = 2
        PADDLE_CHARACTER = 2
 
#キャラネーム
def select_paddle_name(cursor):
    global pad_name
    if cursor.x == CURSOR_X0:
        pad_name =  name_paddle("Speed", "lightslategray")        #パドルの名前
    elif cursor.x == CURSOR_X0 + CURSOR_VX:
        pad_name = name_paddle("Teleportation", "whitesmoke")       #パドルの名前
    else:
        pad_name =  name_paddle("Fortune", "orange")      #パドルの名前

#--------------------------------------
#能力変更
def ability_cange():
    global PADDLE_VX
    global PADDLE_W
    global spear_luck
    global PADDLE_X0
    if serect == 0:
        PADDLE_VX = 7
    elif serect == 1:
        pass
    else:
        spear_luck = 0.01
#------------------------------------
# カーソル操作のイベントハンドラ
def left_cursor(event):
    cursor.vx = -CURSOR_VX
    se_cursor.play()

def right_cursor(event):
    cursor.vx = CURSOR_VX
    se_cursor.play()
        
def stop_cursor(event):
    cursor.vx = 0

# -------------------------
# パドル操作のイベントハンドラ
def left_paddle(event):        # 速度を左向き(マイナス)に設定
    global slide
    slide = 0
    paddle.vx = -PADDLE_VX

def right_paddle(event):       # 速度を右向き(プラス)に設定
    global slide
    slide = 0
    paddle.vx = PADDLE_VX

def stop_paddle(event):        # 速度をゼロに設定
    global slide
    slide = 1



#-------------------------------------------
#合否判定出力
def result_output(result):
    result_text_shadow = canvas.create_text(
    WALL_EAST/2+10, WALL_SOUTH/1.25, text = str(result), fill= "black",
    font=('Lucida Handwriting', 60, "bold", "italic")
    )
    result_text = canvas.create_text(
    WALL_EAST/2, WALL_SOUTH/1.25, text = str(result), fill= "red",
    font=('Lucida Handwriting', 60, "bold" )
    )
    
    
#------------------------------------------------------
#音声ファイル読み込み・再生
def opening_bgm():
    pygame.mixer.init(frequency = 44100)
    pygame.mixer.music.load("gamebgm4(2).mp3")
    pygame.mixer.music.play(-1)
    pygame.mixer.music.set_volume(0.5)

def serect_bgm():
    pygame.mixer.music.load("gamebgm_serect.mp3")
    pygame.mixer.music.play(-1)

def play_bgm():
    pygame.mixer.music.load("gamebgm3.mp3")
    pygame.mixer.music.play(-1)

def ending_bgm():
    pygame.mixer.music.load("gameresult_bgm.mp3")
    pygame.mixer.music.play(-1)


# =================================================
# 初期設定
tk = tkinter.Tk()
tk.title("Game")

canvas = tkinter.Canvas(tk, width=WALL_EAST, height=WALL_SOUTH, bd=0,bg='snow',
                highlightthickness=0)
canvas.pack()

#背景イメージ
img = ImageTk.PhotoImage(file="space_freecom.jpg", width=400, height=400)
canvas.create_image(0, 0, image=img, anchor=tkinter.NW)


tk.update()


game = Game(False)
opening_bgm()

#SE読み込み
se_candy=pygame.mixer.Sound("candy_wave.wav")
se_block=pygame.mixer.Sound("block_wave.wav")
se_start_bell=pygame.mixer.Sound("start_bell.wav")
se_cursor=pygame.mixer.Sound("cursor_move.wav")
se_countdown=pygame.mixer.Sound("countdown.wav")
se_drumroll=pygame.mixer.Sound("drum_roll.wav")
se_gameclear=pygame.mixer.Sound("gameclear.mp3")
se_gameover=pygame.mixer.Sound("gameover.mp3")
se_result_ward=pygame.mixer.Sound("result_ward.wav")

score = 0           # 得点
spear = None
candy = None
paddle_count = 0    # パドルでボールを打った回数
spear_object = 0    # 画面上に槍が存在するか
candy_object = 0    # 画面上にキャンディが存在するか
balls = []          # ボールの配列
endcount = 0

# イベントと、イベントハンドラを連結する。
canvas.bind_all('<KeyPress-Left>', left_cursor)
canvas.bind_all('<KeyPress-Right>', right_cursor)
canvas.bind_all('<KeyRelease-Left>', stop_cursor)
canvas.bind_all('<KeyRelease-Right>', stop_cursor)
canvas.bind_all('<KeyPress-space>', game_start)  # SPACE が押された

#-------------------------------------------------
#第一画面

#タイトル
id_text2_shadow = canvas.create_text(
    WALL_EAST/2+10, 250, text="BLOCK BREAK", fill= "black",
    font=('Lucida Handwriting', 60, "bold", "italic")
    )
id_text2 = canvas.create_text(
    WALL_EAST/2, 250, text="BLOCK BREAK", fill= "magenta",
    font=('Lucida Handwriting', 60, "bold", )
    )

tk.update()

# SPACEの入力待ち

while not game.start:# ひたすら SPACE を待つ
    if game.start == True:
        pass
    else:
        id_text = canvas.create_text(
        WALL_EAST/2, 350, text="Press 'SPACE' to start", fill= "magenta",
        font=('Yu Gothic UI Semibold', 25)
        )
        tk.update()
        time.sleep(1)
        canvas.delete(id_text)
        tk.update()
        time.sleep(0.5)
game.start = False

canvas.delete(id_text)# SPACE入力のメッセージを削除

tk.update()

se_start_bell.play()
#bgmフェードアウト
pygame.mixer.music.fadeout(4000)

#id_text点滅
for q in range(8):
    tk.update()
    id_text = canvas.create_text(
    WALL_EAST/2, 350, text="Press 'SPACE' to start", fill= "magenta",
    font=('Yu Gothic UI Semibold', 25)
    )
    time.sleep(0.2)
    tk.update()
    canvas.delete(id_text)
    time.sleep(0.2)

    
canvas.delete(id_text2)#タイトル削除
canvas.delete(id_text2_shadow)
tk.update()



#-------------------------------
#第二画面
#キャラ選択
#描画アイテム
cursor = make_cursor(CURSOR_X0, CURSOR_Y0) #カーソルの表示
tile_text = canvas.create_text(WALL_EAST / 2, 10, text="Select Paddle", fill = "magenta",  #セレクト画面テキスト
                                     font=("Lucida Handwriting", 50, "bold"), anchor=N)   
type_text = canvas.create_text(10, 150, text="Type:", fill = "magenta",                    #タイプテキスト
                                     font=("Freestyle Script5", 50, "bold"), anchor=W)
id_text3 = canvas.create_text(
    WALL_EAST-150, WALL_SOUTH-20, text="Press 'SPACE' to start ➨", fill= "magenta",
    font=('Yu Gothic UI Semibold', 20)
    )
paddle_model1 = make_paddle(PADDLE_X0 - CURSOR_VX, PADDLE_Y0, PADDLE_COLOR[0], PADDLE_OUTLINE[0], PADDLE_W)
paddle_model2 = make_paddle(PADDLE_X0, PADDLE_Y0, PADDLE_COLOR[1], PADDLE_OUTLINE[1], PADDLE_W)
paddle_model3 = make_paddle(PADDLE_X0 + CURSOR_VX, PADDLE_Y0, PADDLE_COLOR[2], PADDLE_OUTLINE[2], PADDLE_W)
serect = 0    #キャラ選択結果
pad_name = None

serect_bgm()

while True:
    move_cursor(cursor)
    select_paddle_name(cursor)
    select_paddle(cursor)
    redraw_cursor(cursor)
    if game.start==True:
        break
    tk.update()
    time.sleep(DURATION)
    canvas.delete(pad_name)
    
#bgmフェードアウト
pygame.mixer.music.fadeout(4000)
se_start_bell.play()
time.sleep(2)
delete_cursor("all")
#背景再描写
img = ImageTk.PhotoImage(file="space.jpg", width=400, height=400)
canvas.create_image(0, 0, image=img, anchor=tkinter.NW)
tk.update()
game.start = False


#パドルが滑る
slide = 0
spear_luck = 0.1      #槍が落ちる確率
#能力変更
ability_cange()
# 描画アイテムを準備する。
make_walls(0, 0, WALL_EAST, WALL_SOUTH)
paddle = make_paddle(PADDLE_X0, PADDLE_Y0, PADDLE_COLOR[PADDLE_CHARACTER], PADDLE_OUTLINE[PADDLE_CHARACTER], PADDLE_W)
balls.append(make_ball(BALL_X0, BALL_Y0, BALL_VX, BALL_VY, BALL_D))
blocks = make_blocks(NUM_ROWS, NUM_COLS, BLOCK_X, BLOCK_Y,
                     BLOCK_W, BLOCK_H, BLOCK_PAD, BLOCK_COLORS)
target_text = canvas.create_text(WALL_EAST/2, 300, text="Let't aim for 500 points",
                                 fill= "magenta",font=('Lucida Handwriting', 30))

# イベントと、イベントハンドラを連結する2。
canvas.bind_all('<KeyPress-Left>', left_paddle)
canvas.bind_all('<KeyPress-Right>', right_paddle)
canvas.bind_all('<KeyRelease-Left>', stop_paddle)
canvas.bind_all('<KeyRelease-Right>', stop_paddle)

# -------------------------
# スコアの表示
id_score = canvas.create_text(
    10, 10, text=("score: " + str(score)), fill= "magenta", font=("FixedSys", 16),
    justify="left", anchor=NW
    )

# -------------------------
#第三画面
#カウントダウン
tk.update()
time.sleep(2)
canvas.delete(target_text)
se_countdown.play()

for z in range(4):
    count=canvas.create_text(
    WALL_EAST/2, 300, text=COUNT_DOWN[z], fill= "magenta",
    font=('HG創英角ポップ体', 80)
    )
    tk.update()
    time.sleep(0.7)
    canvas.delete(count)
    tk.update()
    time.sleep(0.3)

play_bgm()


# プログラムのメインループ
while True:
    move_paddle(paddle)       # パドルの移動
    if spear:
        move_spear(spear)     # 槍の落下
    if candy:
        move_candy(candy)     # キャンディの落下
    for ball in balls:
        move_ball(ball)       # ボールの移動
        if ball.x + ball.vx <= 0:  # 左側の壁で跳ね返る
            ball.vx = - ball.vx
        if ball.x + ball.d + ball.vx  >= WALL_EAST: # 右の壁
            ball.vx = - ball.vx
        if ball.y + ball.vy <= 0:  # 上の壁
            ball.vy = - ball.vy
        if ball.y + ball.d + ball.vy >= WALL_SOUTH : # 下に逸らした
            canvas.delete(ball.id)   # ボールを画面から消す
            balls.remove(ball)
    if len(balls)==0:   # 最後のボールを逃した
        game_over()
        break
    if spear:
        if (paddle.x <= spear.x <= paddle.x + paddle.w \
            and spear.y + spear.h > paddle.y \
            and spear.y <= paddle.y + paddle.h):  # 槍に当たった
            redraw_paddle(paddle)
            redraw_spear(spear)
            game_over()
            break
    if candy:
        if (paddle.x <= candy.x <= paddle.x + paddle.w \
            and candy.y + candy.h > paddle.y \
            and candy.y <= paddle.y + paddle.h):  # ボーナスアイテムゲット
            score += CANDY_BONUS
            canvas.itemconfigure(id_score, text="score:" + str(score))
            delete_candy(candy)
            candy = None
            se_candy.play()

    for ball in balls:
        # ボールの下側がパドルの上面に届き、横位置がパドルと重なる
        if (paddle.y <= ball.y + ball.d <= paddle.y + paddle.h \
            and paddle.x < ball.x + ball.d/2 < paddle.x + paddle.w):
            ball.vy = -ball.vy    # ボールの移動方向が変わる
            # 移動後もパドルと重なる：横から重なった場合
            if paddle.y <= ball.y + ball.d + ball.vy <= paddle.y + paddle.h:
                ball.y = paddle.y - ball.d # パドルの上に戻す
            paddle_count += 1
            if paddle_count % SPEED_UP == 0: # ボールを加速させるか？
                if ball.vy > - BALL_MAX_VY: # まだ加速できる！
                    ball.vy -= 1   # ボールが上向きになっていることに注意！
            # ボールの位置によって、反射角度を変える
            ball.vx = int(6 * (ball.x + ball.d/2 - paddle.x)
                             / paddle.w) - 3
            if paddle_count % MULTI_BALL_COUNT == 0: # ボールを発生
                if len(balls) < BALL_MAX_NUM:
                    balls.append(
                        make_ball(
                            BALL_X0, BALL_Y0, random.choice(VX0),
                            BALL_VY, BALL_D
                            ))

        for block in blocks: # 全てのブロックについて、調べる
            # ボールのX位置がブロックの範囲内で、ボールのY位置がブロックの範囲内
            if (block.x < ball.x + ball.d/2 < block.x + block.w \
                and (block.y <= ball.y <= block.y + block.h
                     or block.y <= ball.y + ball.d \
                         <= block.y + block.h)):
                ball.vy = -ball.vy
                block.bc -= 1
                se_block.play()
                if block.bc == 0:  # 硬さの残りが0
                    score += block.pt  # ブロックごとに得点が異なる
                    canvas.itemconfigure(id_score, text="score:" + str(score))
                    delete_block(block)
                    blocks.remove(block)
                    break
                else:   # ブロックの色で硬さを表す
                    canvas.itemconfigure(block.id,
                                         fill=BLOCK_COLORS[block.bc - 1])
                    canvas.itemconfigure(block.id,
                                         outline=BLOCK_COLORS[block.bc - 1])

    if len(blocks) == 0:  # 配列が空の、別のチェック方法
        canvas.create_text(WALL_EAST/2, 200,
                           text="Clear!", font=('FixedSys', 16))
        break

    if spear==None and random.random() < spear_luck:  # 確率2%で発生
        spear = make_spear(random.randint(100, WALL_EAST - 100), 10)
        spear_object += 1
    if spear and spear.y + spear.h >= WALL_SOUTH:
        delete_spear(spear)
        spear = None
        spear_object -= 1

    if candy==None and random.random() < 0.005:
        candy = make_candy(random.randint(100, WALL_EAST - 100), 10,
                           CANDY_W, CANDY_H)
        candy_object += 1
    if candy and candy.y + candy.h >= WALL_SOUTH:
        delete_candy(candy)
        candy = None
        candy_object -= 1

    redraw_paddle(paddle)        # パドルの再描画
    for ball in balls:
        redraw_ball(ball)     # ボールの再描画
    if spear:
        redraw_spear(spear)   # 槍の再描画
    if candy:
        redraw_candy(candy)   # キャンディの再描画
    tk.update()               # 描画が画面に反映される。
    time.sleep(DURATION)      # 次に描画するまで、sleepする。

#------------------------------------------------------
#スコア画面
pygame.mixer.music.fadeout(1000)
time.sleep(1)
#描画削除
canvas.delete("all")

#背景再描写
if score < 900:
    img = ImageTk.PhotoImage(file="space_freecom.jpg", width=400, height=400)
    canvas.create_image(0, 0, image=img, anchor=tkinter.NW)

tk.update()
time.sleep(0.75)
#スコア表示
your_text = canvas.create_text(
    WALL_EAST/2-30, 200, text="Your", fill= "magenta",
    font=('Palatino Linotype', 60, "italic"), anchor = E
    )
se_result_ward.play()
    
tk.update()
time.sleep(1)

your_text = canvas.create_text(
    WALL_EAST/2+30, 200, text="Score", fill= "magenta",
    font=('Palatino Linotype', 60, "italic"), anchor = W
    )
se_result_ward.play()

tk.update()
se_drumroll.play()
time.sleep(2)

id_score = canvas.create_text(
    WALL_EAST/2, WALL_SOUTH/1.75, text=(str(score)), fill= "firebrick", font=("Palatino Linotype", 80 , "bold"),
    justify="left"
    )
se_result_ward.play()
tk.update()
time.sleep(1)

#合否判定
if score<500:
    result_output("Game Over")
    se_gameover.play()
elif score >= 900:
    result_text_shadow = canvas.create_text(
    WALL_EAST/2-50, WALL_SOUTH/1.25, text = "Congratulation", fill= "dimgray",
    font=('Lucida Handwriting', 61, "bold", "italic")
    )
    result_text_ = canvas.create_text(
    WALL_EAST/2-50, WALL_SOUTH/1.25, text = "Congratulation", fill= "white",
    font=('Lucida Handwriting', 60, "italic")
    )
else:
    result_output("Congratulation")
    se_gameclear.play()
tk.update()
time.sleep(8)

ending_bgm()

# SPACEの入力待ち(タイトル画面へ)
while not game.start:# ひたすら SPACE を待つ:
    id_text3 = canvas.create_text(
    WALL_EAST-150, WALL_SOUTH-20, text="Press 'Enter' to title ➨", fill= "magenta",
    font=('Yu Gothic UI Semibold', 20)
    )
    tk.update()
    time.sleep(1)
    canvas.delete(id_text3)
    tk.update()
    time.sleep(0.5)

#ファイルを再リロード
python = sys.executable
os.execl(python, python, * sys.argv)








